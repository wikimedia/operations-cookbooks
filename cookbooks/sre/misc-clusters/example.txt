"""sretest reboot cookbook

Usage example:
    cookbook sre.misc-clusters.sretest

"""

from spicerack.remote import RemoteExecutionError
from cookbooks.sre import SREBatchBase, SREBatchRunnerBase, ScriptReturn


class Reboot(SREBatchBase):
    """An example reboot class"""

    # override the default batch size
    # Optional
    batch_default = 2

    # Override the batch_max
    # Optional
    batch_max = 40

    # Override the default grace sleep period
    # Optional
    grace_sleep = 1

    # Override the default list of actions.  By default the action method will attempt to
    # call functions name f'_{action}_action'.  e.g. if we add the action foobar then the
    # action method will try to call _foobar_action passing in the current batch of remote hosts e.g.
    #   self._foobar_action(hosts)
    # Optional
    valid_actions = ('reboot', 'restart_daemons')

    # add additional arguments
    # Optional
    def argument_parser(self):
        """Argument parser"""
        parser = super().argument_parser()
        parser.add_argument('--foobar')
        return parser

    # Required
    def get_runner(self, args):
        """As specified by Spicerack API."""
        return RebootRunner(args, self.spicerack)


class RebootRunner(SREBatchRunnerBase):
    """An example reboot class"""

    # Required
    @property
    def allowed_aliases(self):
        """Required by RebootRunnerBase"""
        return ['example']

    # Optional
    @property
    def runtime_description(self):
        """Override the default runtime description"""
        return "example cookbook for rebooting/restarting services"

    # Required
    @property
    def restart_daemons(self):
        """Return a list of daemons to restart when using the restart action"""
        return ['foobar']

    # create an example function to be used but pre/post_scripts
    # Optional
    def script_example(self, hosts):
        """Run pre boot script"""
        actions = ['echo "Nothing really happens"', 'echo "Really"']
        try:
            hosts.run_sync(*actions)
        except RemoteExecutionError as error:
            self.logger.error("Failed to run pre reboot script:")
            self.logger.error(error)
            return ScriptReturn(1, error)
        return ScriptReturn(0, "")

    # Set the pre_scripts property to run our example_script
    # Optional
    @property
    def pre_scripts(self):
        """Should return a list of scripts to tun as prescripts or an empty list"""
        print('starting pre scripts')
        return [self.script_example]

    # Set the post_scripts property to run our example_script
    # Optional
    @property
    def post_scripts(self):
        """Should return a list of scripts to tun as prescripts or an empty list"""
        return [self.script_example]
        print('finished post scripts')

    # Alternatively one can hook the pre/post_action function and run python
    # Optional
    def pre_action(self, hosts):  # pylint: disable=useless-super-delegation
        """pre_reboot function"""
        print('doing pre action')
        super().pre_reboot(hosts)

    # Optional
    def post_action(self, hosts):  # pylint: disable=useless-super-delegation
        """post_reboot function"""
        print('doing post action')
        super().post_reboot(hosts)
        print('finished post action')

    # By default the cookbook will only have one host group. If you have more then one
    # the group_action hook might come in handy
    # Optional
    def group_action(self, host_group_idx, number_of_batches: int) -> None:
        """Action to perform once for every host group, right before working on the first batch"""
        print(f'Processing host group {host_group_idx} in {number_of_batches} batches')

    # Optional
    # when adding additional actions in SREBatchBase you will need to create a corrosponding method
    # assume we have the action upgrade then we would need
    def _upgrade_action(self, hosts):
      """Perform upgrade action"""

    # Optional
    def run(self):
        """Cookbook Run"""
        super().run(self)
# vim: set syntax=python:
